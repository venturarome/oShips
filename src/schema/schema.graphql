type Query {
    "List of all the available ships in the game"
    ships: [Ship]!
    "Info of the ship with the given id"
    ship(id: ID!): Ship

    "List all different resources"
    resources: [Resource!]!

    "List all registered fleets"
    fleets: [Fleet]!

    "Run a battle simulation between two stored fleets and return the remaining fleets after the battle"
    runSimulation(attackerFleetId: ID, defenderFleetId: ID): Simulation!
}

type Mutation {
    "Add new fleet"
    addFleet(fleetInput: FleetInput): Fleet
    "Remove fleet"
    deleteFleet(id: ID!): Fleet
}

"Information about the ship"
type Ship {
    "Ship identifier"
    id: ID!
    "Ship name"
    name: String!
    "Cost to build one unit of the ship, detailed by resource type"
    cost: [Cost!]
    type: ShipType
    structural_integrity: Int
    shield_power: Int
    weapon_power: Int
    base_speed: Int
    cargo_capacity: Int
    fuel_consumption: Int
    rapid_fire_against: [RapidFire]
    rapid_fire_from: [RapidFire]
}

"Value object, containing and amount and a resource"
type Cost {
    resource: Resource!
    amount: Int!
}

"Value object, containing information about a resource"
type Resource {
    name: String!
    type: ResourceType!
    description: String!
}

"Available resource types"
enum ResourceType {
    METAL
    CRYSTAL
    DEUTERIUM
}

"Whether the ship is a battleship or civil"
enum ShipType {
    BATTLESHIP
    CIVIL
}

type RapidFire {
    ship: Ship!
    shots: Int!
    probability: Float!
}

type Fleet {
    id: ID!
    name: String!
    shipNumbers: [ShipNumber]!
    # Calculated values:
    totalShips: Int
}

type ShipNumber {
    ship: Ship!
    number: Int
    # Calculated fields:
    "The combined weapon_power of all the ships of that kind (number * ship.weapon_power)"
    weapon_power: Int
    "The sum of the cargo_capacity of all the ships of that kind (number * ship.cargo_capacity)"
    cargo_capacity: Int
}

type Simulation {
    summary: String!
    attackerFleet: Fleet
    defenderFleet: Fleet
    battleResult: BattleResult
    "Number of rounds needed to have a winner. Max number of rounds is 5."
    rounds: Int
    "Attacker ships that survived after the battle"
    remainingAttackerFleet: Fleet
    "Defender ships that survived after the battle"
    remainingDefenderFleet: Fleet
}

"Enum value to check who won a battle"
enum BattleResult {
    ATTACKER_WINS
    DEFENDER_WINS
    DRAW
}

input FleetInput {
    name: String!
    shipNumbers: [ShipNumberInput]
}

input ShipNumberInput {
    ship: ID!
    number: Int!
}